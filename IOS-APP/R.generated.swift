//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `Test.txt`.
    static let testTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "Test", pathExtension: "txt")
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Test", withExtension: "txt")`
    static func testTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.testTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `LogoImage`.
    static let logoImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LogoImage")
    /// Image `RecordButton`.
    static let recordButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "RecordButton")
    /// Image `Remove`.
    static let remove = Rswift.ImageResource(bundle: R.hostingBundle, name: "Remove")
    /// Image `SplashImage`.
    static let splashImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "SplashImage")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    
    /// `UIImage(named: "LogoImage", bundle: ..., traitCollection: ...)`
    static func logoImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "RecordButton", bundle: ..., traitCollection: ...)`
    static func recordButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.recordButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Remove", bundle: ..., traitCollection: ...)`
    static func remove(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.remove, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SplashImage", bundle: ..., traitCollection: ...)`
    static func splashImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.splashImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `MovieListCollectionCell`.
    static let movieListCollectionCell: Rswift.ReuseIdentifier<MovieListCollectionCell> = Rswift.ReuseIdentifier(identifier: "MovieListCollectionCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 5 view controllers.
  struct segue {
    /// This struct is generated for `CameraViewController`, and contains static references to 1 segues.
    struct cameraViewController {
      /// Segue identifier `processVideo`.
      static let processVideo: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CameraViewController, SearchVideoController> = Rswift.StoryboardSegueIdentifier(identifier: "processVideo")
      
      /// Optionally returns a typed version of segue `processVideo`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func processVideo(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CameraViewController, SearchVideoController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.cameraViewController.processVideo, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MainViewController`, and contains static references to 4 segues.
    struct mainViewController {
      /// Segue identifier `showCameraView`.
      static let showCameraView: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showCameraView")
      /// Segue identifier `showFindings`.
      static let showFindings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, MovieListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showFindings")
      /// Segue identifier `showSettings`.
      static let showSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, SettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSettings")
      /// Segue identifier `showTermsOfUse`.
      static let showTermsOfUse: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showTermsOfUse")
      
      /// Optionally returns a typed version of segue `showCameraView`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCameraView(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.showCameraView, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showFindings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFindings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, MovieListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.showFindings, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, SettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.showSettings, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showTermsOfUse`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTermsOfUse(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainViewController.showTermsOfUse, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MovieListViewController`, and contains static references to 1 segues.
    struct movieListViewController {
      /// Segue identifier `showMovieDetails`.
      static let showMovieDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MovieListViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showMovieDetails")
      
      /// Optionally returns a typed version of segue `showMovieDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showMovieDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MovieListViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.movieListViewController.showMovieDetails, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SearchVideoController`, and contains static references to 1 segues.
    struct searchVideoController {
      /// Segue identifier `showNotFound`.
      static let showNotFound: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SearchVideoController, NotFoundController> = Rswift.StoryboardSegueIdentifier(identifier: "showNotFound")
      
      /// Optionally returns a typed version of segue `showNotFound`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNotFound(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SearchVideoController, NotFoundController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.searchVideoController.showNotFound, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SettingsViewController`, and contains static references to 1 segues.
    struct settingsViewController {
      /// Segue identifier `showFeedbackScreen`.
      static let showFeedbackScreen: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showFeedbackScreen")
      
      /// Optionally returns a typed version of segue `showFeedbackScreen`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFeedbackScreen(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.showFeedbackScreen, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "SplashImage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashImage' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let cameraViewController = StoryboardViewControllerResource<CameraViewController>(identifier: "CameraViewController")
      let movieDetailsViewController = StoryboardViewControllerResource<MovieDetailsViewController>(identifier: "MovieDetailsViewController")
      let name = "Main"
      let notFoundController = StoryboardViewControllerResource<NotFoundController>(identifier: "NotFoundController")
      let searchVideoController = StoryboardViewControllerResource<SearchVideoController>(identifier: "SearchVideoController")
      let termsOfUseViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "TermsOfUseViewController")
      
      func cameraViewController(_: Void = ()) -> CameraViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: cameraViewController)
      }
      
      func movieDetailsViewController(_: Void = ()) -> MovieDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: movieDetailsViewController)
      }
      
      func notFoundController(_: Void = ()) -> NotFoundController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notFoundController)
      }
      
      func searchVideoController(_: Void = ()) -> SearchVideoController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchVideoController)
      }
      
      func termsOfUseViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: termsOfUseViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Remove") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Remove' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "RecordButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'RecordButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SplashImage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SplashImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LogoImage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LogoImage' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().termsOfUseViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'termsOfUseViewController' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().notFoundController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notFoundController' could not be loaded from storyboard 'Main' as 'NotFoundController'.") }
        if _R.storyboard.main().movieDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'movieDetailsViewController' could not be loaded from storyboard 'Main' as 'MovieDetailsViewController'.") }
        if _R.storyboard.main().cameraViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'cameraViewController' could not be loaded from storyboard 'Main' as 'CameraViewController'.") }
        if _R.storyboard.main().searchVideoController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchVideoController' could not be loaded from storyboard 'Main' as 'SearchVideoController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
